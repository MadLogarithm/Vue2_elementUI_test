{"ast":null,"code":"import axios from 'axios';\nimport { RouterLink } from 'vue-router';\nexport default {\n  name: \"HelloWorld\",\n  data() {\n    return {\n      responseMessage: 'null',\n      tableData: []\n    };\n  },\n  props: {\n    msg: String\n  },\n  methods: {\n    getHello() {\n      axios.get('http://localhost:8080/hello').then(response => {\n        this.responseMessage = response.data;\n      }).catch(error => {\n        this.responseMessage = error;\n        console.error('Error fetching hello:', error);\n      });\n    },\n    resetHello() {\n      this.responseMessage = 'null';\n    },\n    getTableData() {\n      axios.get('http://localhost:8080/getUser').then(response => {\n        this.tableData = this.parseData(response.data);\n      }).catch(error => {\n        console.error('Error fetching hello:', error);\n      });\n    },\n    resetTableData() {\n      this.resetTableData = [];\n    },\n    parseData(data) {\n      return data.map(item => {\n        return {\n          id: item[0],\n          name: item[1],\n          email: item[2]\n        };\n      });\n    }\n  },\n  components: {\n    RouterLink\n  }\n};","map":{"version":3,"names":["axios","RouterLink","name","data","responseMessage","tableData","props","msg","String","methods","getHello","get","then","response","catch","error","console","resetHello","getTableData","parseData","resetTableData","map","item","id","email","components"],"sources":["src/components/HelloWorld.vue"],"sourcesContent":["<template>\r\n  <div class=\"hello\">\r\n    <h3>todolist</h3>\r\n    <ul>\r\n      设置InfiList.vue中box-card内容\r\n    </ul>\r\n    <ul>\r\n      页面的el-backtop总出bug，并且不太会解决\r\n    </ul>\r\n    <ul>\r\n      模仿\r\n      <a href=\"https://time.com/6342806/person-of-the-year-2023-taylor-swift/\" target=\"_blank\">2023时代年度人物</a>\r\n      搭一个试试=>\r\n      <RouterLink :to=\"{path:'/time_magazine'}\">Click here</RouterLink>\r\n    </ul>\r\n    <ul>\r\n      建个简单后端试试=>\r\n      <el-button @click=\"getHello\" size=\"mini\" round>test</el-button>\r\n      <el-button @click=\"resetHello\" size=\"mini\" round>reset</el-button>\r\n      {{ responseMessage }}\r\n    </ul>\r\n    <ul>\r\n      后端和数据库建立连接，前端调用数据库表格：\r\n      <el-button @click=\"getTableData\" size=\"mini\" round>test</el-button>\r\n      <el-button @click=\"resetTableData\" size=\"mini\" round>reset</el-button>\r\n      <el-table :data=\"tableData\" stripe style=\"width: 100%\">\r\n      <el-table-column prop=\"id\" label=\"id\" width=\"180\"></el-table-column>\r\n      <el-table-column prop=\"name\" label=\"姓名\" width=\"180\"></el-table-column>\r\n      <el-table-column prop=\"email\" label=\"邮箱\"></el-table-column>\r\n    </el-table>\r\n    </ul>\r\n    <ul>\r\n      ...\r\n    </ul>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport axios from 'axios';\r\nimport { RouterLink } from 'vue-router';\r\n\r\nexport default {\r\n    name: \"HelloWorld\",\r\n    data() {\r\n      return {\r\n        responseMessage: 'null',\r\n        tableData: []\r\n      };\r\n    },\r\n    props: {\r\n        msg: String,\r\n    },\r\n    methods: {\r\n      getHello() {\r\n        axios.get('http://localhost:8080/hello')\r\n          .then(response => {\r\n            this.responseMessage = response.data;\r\n          })\r\n          .catch(error => {\r\n            this.responseMessage = error;\r\n            console.error('Error fetching hello:', error);\r\n          });\r\n      },\r\n      resetHello() {\r\n        this.responseMessage = 'null';\r\n      },\r\n      getTableData() {\r\n        axios.get('http://localhost:8080/getUser')\r\n          .then(response => {\r\n            this.tableData = this.parseData(response.data);\r\n          })\r\n          .catch(error => {\r\n            console.error('Error fetching hello:', error);\r\n          });\r\n      },\r\n      resetTableData() {\r\n        this.resetTableData = [];\r\n      },\r\n      parseData(data) {\r\n        return data.map(item => {\r\n          return {\r\n            id: item[0],\r\n            name: item[1],\r\n            email: item[2]\r\n          };\r\n        });\r\n      }\r\n    },\r\n    components: { RouterLink }\r\n};\r\n</script>\r\n\r\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\r\n<style lang=\"less\" scoped>  \r\nh3 {\r\n  margin: 0 0 0;\r\n}\r\nul {\r\n  list-style-type: none;\r\n  padding: 0;\r\n  margin: 10px 20px;\r\n}\r\nli {\r\n  display: inline-block;\r\n  margin: 0 10px;\r\n}\r\na {\r\n  color: #42b983;\r\n}\r\n</style>\r\n"],"mappings":"AAsCA,OAAAA,KAAA;AACA,SAAAC,UAAA;AAEA;EACAC,IAAA;EACAC,KAAA;IACA;MACAC,eAAA;MACAC,SAAA;IACA;EACA;EACAC,KAAA;IACAC,GAAA,EAAAC;EACA;EACAC,OAAA;IACAC,SAAA;MACAV,KAAA,CAAAW,GAAA,gCACAC,IAAA,CAAAC,QAAA;QACA,KAAAT,eAAA,GAAAS,QAAA,CAAAV,IAAA;MACA,GACAW,KAAA,CAAAC,KAAA;QACA,KAAAX,eAAA,GAAAW,KAAA;QACAC,OAAA,CAAAD,KAAA,0BAAAA,KAAA;MACA;IACA;IACAE,WAAA;MACA,KAAAb,eAAA;IACA;IACAc,aAAA;MACAlB,KAAA,CAAAW,GAAA,kCACAC,IAAA,CAAAC,QAAA;QACA,KAAAR,SAAA,QAAAc,SAAA,CAAAN,QAAA,CAAAV,IAAA;MACA,GACAW,KAAA,CAAAC,KAAA;QACAC,OAAA,CAAAD,KAAA,0BAAAA,KAAA;MACA;IACA;IACAK,eAAA;MACA,KAAAA,cAAA;IACA;IACAD,UAAAhB,IAAA;MACA,OAAAA,IAAA,CAAAkB,GAAA,CAAAC,IAAA;QACA;UACAC,EAAA,EAAAD,IAAA;UACApB,IAAA,EAAAoB,IAAA;UACAE,KAAA,EAAAF,IAAA;QACA;MACA;IACA;EACA;EACAG,UAAA;IAAAxB;EAAA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}